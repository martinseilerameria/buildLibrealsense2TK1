diff -Naur kernel/drivers/iio/accel/hid-sensor-accel-3d.c kernel.patch/drivers/iio/accel/hid-sensor-accel-3d.c
--- kernel/drivers/iio/accel/hid-sensor-accel-3d.c	2016-06-08 03:58:36.000000000 +0000
+++ kernel.patch/drivers/iio/accel/hid-sensor-accel-3d.c	2019-05-04 10:04:30.364464448 +0000
@@ -45,7 +45,9 @@
 	struct hid_sensor_hub_callbacks callbacks;
 	struct hid_sensor_common common_attributes;
 	struct hid_sensor_hub_attribute_info accel[ACCEL_3D_CHANNEL_MAX];
-	u32 accel_val[ACCEL_3D_CHANNEL_MAX];
+	/* Reserve for 3 channels + padding + timestamp */
+	u32 accel_val[ACCEL_3D_CHANNEL_MAX + 3];
+	int64_t timestamp;
 };
 
 static const u32 accel_3d_addresses[ACCEL_3D_CHANNEL_MAX] = {
@@ -83,7 +85,8 @@
 		BIT(IIO_CHAN_INFO_SAMP_FREQ) |
 		BIT(IIO_CHAN_INFO_HYSTERESIS),
 		.scan_index = CHANNEL_SCAN_INDEX_Z,
-	}
+	},
+	IIO_CHAN_SOFT_TIMESTAMP(3)
 };
 
 /* Adjust channel real bits based on report descriptor */
@@ -194,10 +197,10 @@
 };
 
 /* Function to push data to buffer */
-static void hid_sensor_push_data(struct iio_dev *indio_dev, u8 *data, int len)
+static void hid_sensor_push_data(struct iio_dev *indio_dev, u8 *data, int len, int64_t timestamp)
 {
 	dev_dbg(&indio_dev->dev, "hid_sensor_push_data\n");
-	iio_push_to_buffers(indio_dev, (u8 *)data);
+	iio_push_to_buffers_with_timestamp(indio_dev, data, timestamp);
 }
 
 /* Callback handler to send event after all samples are received and captured */
@@ -210,10 +213,17 @@
 
 	dev_dbg(&indio_dev->dev, "accel_3d_proc_event [%d]\n",
 				accel_state->common_attributes.data_ready);
-	if (accel_state->common_attributes.data_ready)
+	if (accel_state->common_attributes.data_ready) {
+		if (!accel_state->timestamp)
+			accel_state->timestamp = iio_get_time_ns();
+
 		hid_sensor_push_data(indio_dev,
-				(u8 *)accel_state->accel_val,
-				sizeof(accel_state->accel_val));
+				     (u8 *)accel_state->accel_val,
+				     sizeof(accel_state->accel_val),
+				     accel_state->timestamp);
+
+		accel_state->timestamp = 0;
+	}
 
 	return 0;
 }
@@ -238,6 +248,10 @@
 						*(u32 *)raw_data;
 		ret = 0;
 	break;
+	case HID_USAGE_SENSOR_TIME_TIMESTAMP:	// usec->nsec
+		accel_state->timestamp = (*(int64_t *)raw_data)*1000;
+		ret = 0;
+	break;
 	default:
 		break;
 	}
diff -Naur kernel/drivers/iio/gyro/hid-sensor-gyro-3d.c kernel.patch/drivers/iio/gyro/hid-sensor-gyro-3d.c
--- kernel/drivers/iio/gyro/hid-sensor-gyro-3d.c	2016-06-08 03:58:36.000000000 +0000
+++ kernel.patch/drivers/iio/gyro/hid-sensor-gyro-3d.c	2019-05-04 10:04:30.366464430 +0000
@@ -45,7 +45,9 @@
 	struct hid_sensor_hub_callbacks callbacks;
 	struct hid_sensor_common common_attributes;
 	struct hid_sensor_hub_attribute_info gyro[GYRO_3D_CHANNEL_MAX];
-	u32 gyro_val[GYRO_3D_CHANNEL_MAX];
+	/* Reserve for 3 channels + padding + timestamp */
+	u32 gyro_val[GYRO_3D_CHANNEL_MAX + 3];
+	int64_t timestamp;
 };
 
 static const u32 gyro_3d_addresses[GYRO_3D_CHANNEL_MAX] = {
@@ -83,7 +85,8 @@
 		BIT(IIO_CHAN_INFO_SAMP_FREQ) |
 		BIT(IIO_CHAN_INFO_HYSTERESIS),
 		.scan_index = CHANNEL_SCAN_INDEX_Z,
-	}
+	},
+	IIO_CHAN_SOFT_TIMESTAMP(3)
 };
 
 /* Adjust channel real bits based on report descriptor */
@@ -194,10 +197,10 @@
 };
 
 /* Function to push data to buffer */
-static void hid_sensor_push_data(struct iio_dev *indio_dev, u8 *data, int len)
+static void hid_sensor_push_data(struct iio_dev *indio_dev, u8 *data, int len, int64_t timestamp)
 {
 	dev_dbg(&indio_dev->dev, "hid_sensor_push_data\n");
-	iio_push_to_buffers(indio_dev, (u8 *)data);
+	iio_push_to_buffers_with_timestamp(indio_dev, data, timestamp);
 }
 
 /* Callback handler to send event after all samples are received and captured */
@@ -210,10 +213,17 @@
 
 	dev_dbg(&indio_dev->dev, "gyro_3d_proc_event [%d]\n",
 				gyro_state->common_attributes.data_ready);
-	if (gyro_state->common_attributes.data_ready)
-		hid_sensor_push_data(indio_dev,
-				(u8 *)gyro_state->gyro_val,
-				sizeof(gyro_state->gyro_val));
+	if (gyro_state->common_attributes.data_ready) {
+		if (!gyro_state->timestamp)
+			gyro_state->timestamp = iio_get_time_ns();
+
+ 		hid_sensor_push_data(indio_dev,
+				     (u8 *)gyro_state->gyro_val,
+				     sizeof(gyro_state->gyro_val),
+				     gyro_state->timestamp);
+
+		gyro_state->timestamp = 0;
+	}
 
 	return 0;
 }
@@ -238,6 +248,10 @@
 						*(u32 *)raw_data;
 		ret = 0;
 	break;
+	case HID_USAGE_SENSOR_TIME_TIMESTAMP: // usec->nsec
+		gyro_state->timestamp = (*(int64_t *)raw_data)*1000;
+		ret = 0;
+	break;
 	default:
 		break;
 	}
diff -Naur kernel/drivers/media/usb/uvc/Makefile kernel.patch/drivers/media/usb/uvc/Makefile
--- kernel/drivers/media/usb/uvc/Makefile	2016-06-08 03:58:37.000000000 +0000
+++ kernel.patch/drivers/media/usb/uvc/Makefile	2019-05-04 10:04:30.367464420 +0000
@@ -1,3 +1,4 @@
+CONFIG_MODULE_SIG=n
 uvcvideo-objs  := uvc_driver.o uvc_queue.o uvc_v4l2.o uvc_video.o uvc_ctrl.o \
 		  uvc_status.o uvc_isight.o uvc_debugfs.o
 ifeq ($(CONFIG_MEDIA_CONTROLLER),y)
diff -Naur kernel/drivers/media/usb/uvc/uvc_ctrl.c kernel.patch/drivers/media/usb/uvc/uvc_ctrl.c
--- kernel/drivers/media/usb/uvc/uvc_ctrl.c	2016-06-08 03:58:37.000000000 +0000
+++ kernel.patch/drivers/media/usb/uvc/uvc_ctrl.c	2019-05-04 10:04:30.369464402 +0000
@@ -357,6 +357,7 @@
 	{ 0, "Disabled" },
 	{ 1, "50 Hz" },
 	{ 2, "60 Hz" },
+	{ 3, "Auto" },
 };
 
 static struct uvc_menu_info exposure_auto_controls[] = {
diff -Naur kernel/drivers/media/usb/uvc/uvc_driver.c kernel.patch/drivers/media/usb/uvc/uvc_driver.c
--- kernel/drivers/media/usb/uvc/uvc_driver.c	2016-06-08 03:58:37.000000000 +0000
+++ kernel.patch/drivers/media/usb/uvc/uvc_driver.c	2019-05-04 10:04:30.373464366 +0000
@@ -122,6 +122,92 @@
 		.guid		= UVC_GUID_FORMAT_H264,
 		.fcc		= V4L2_PIX_FMT_H264,
 	},
+        {
+                .name           = "Raw data 8-bit (RAW8)",
+                .guid           = UVC_GUID_FORMAT_RAW8,
+                .fcc            = V4L2_PIX_FMT_GREY,
+        },
+        {
+                .name           = "Raw data 16-bit (RW16)",
+                .guid           = UVC_GUID_FORMAT_RW16,
+                .fcc            = V4L2_PIX_FMT_RW16,
+        },
+        {
+                .name           = "Depth 16-bit (INVZ)",
+                .guid           = UVC_GUID_FORMAT_INVZ,
+                .fcc            = V4L2_PIX_FMT_Z16,
+        },
+        {
+                .name           = "Depth:IR 16:8 24-bit (INZI)",
+                .guid           = UVC_GUID_FORMAT_INZI,
+                .fcc            = V4L2_PIX_FMT_INZI,
+        },
+        {
+                .name           = "Depth 16-bit (INVR)",
+                .guid           = UVC_GUID_FORMAT_INVR,
+                .fcc            = V4L2_PIX_FMT_INVR,
+        },
+        {
+                .name           = "Depth:IR 16:8 24-bit (INRI)",
+                .guid           = UVC_GUID_FORMAT_INRI,
+                .fcc            = V4L2_PIX_FMT_INRI,
+        },
+        {
+                .name           = "Infrared 8-bit (INVI)",
+                .guid           = UVC_GUID_FORMAT_INVI,
+                .fcc            = V4L2_PIX_FMT_GREY,
+        },
+        {
+                .name           = "FlickerIR 8-bit (RELI)",
+                .guid           = UVC_GUID_FORMAT_RELI,
+                .fcc            = V4L2_PIX_FMT_RELI,
+        },
+        {
+                .name           = "Luminosity data 8-bit (L8)",
+                .guid           = UVC_GUID_FORMAT_L8,
+                .fcc            = V4L2_PIX_FMT_GREY,
+        },
+        {
+                .name           = "Luminosity data 16-bit (L16)",
+                .guid           = UVC_GUID_FORMAT_L16,
+                .fcc            = V4L2_PIX_FMT_Y16,
+        },
+        {
+                .name           = "Depth data 16-bit (D16)",
+                .guid           = UVC_GUID_FORMAT_D16,
+                .fcc            = V4L2_PIX_FMT_Z16,
+        },
+        {
+                .name           = "16-bit Bayer BGBG/GRGR",
+                .guid           = UVC_GUID_FORMAT_BAYER16,
+                .fcc            = V4L2_PIX_FMT_SBGGR16,
+        },
+        {
+                .name           = "Packed raw data 10-bit",
+                .guid           = UVC_GUID_FORMAT_W10,
+                .fcc            = V4L2_PIX_FMT_W10,
+        },
+        {
+                .name           = "Confidence data (C   )",
+                .guid           = UVC_GUID_FORMAT_CONFIDENCE_MAP,
+                .fcc            = V4L2_PIX_FMT_CONFIDENCE_MAP,
+        },
+        /* Legacy/Development formats for backward-compatibility*/
+        {
+                .name           = "Frame Grabber (FG  )",
+                .guid           = UVC_GUID_FORMAT_FG,
+                .fcc            = V4L2_PIX_FMT_FG,
+        },
+        {
+                .name           = "SR300 Depth/Confidence (INZC)",
+                .guid           = UVC_GUID_FORMAT_INZC,
+                .fcc            = V4L2_PIX_FMT_INZC,
+        },
+        {
+                .name           = "Relative IR (PAIR)",
+                .guid           = UVC_GUID_FORMAT_PAIR,
+                .fcc            = V4L2_PIX_FMT_PAIR,
+        },
 };
 
 /* ------------------------------------------------------------------------
@@ -2420,6 +2506,176 @@
 	  .bInterfaceProtocol	= 0,
 	  .driver_info		= UVC_QUIRK_PROBE_MINMAX
 				| UVC_QUIRK_IGNORE_SELECTOR_UNIT },
+	/* Intel D400/PSR depth camera*/
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0ad1,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D410/ASR depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0ad2,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D415/ASRC depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0ad3,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D430/AWG depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0ad4,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	/* Intel D450/AWGT depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0ad5,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D400 IMU Module */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0af2,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	/* Intel D420/PWG depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0af6,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	/* Intel D420_MM/PWGT depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0afe,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D410_MM/ASRT depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0aff,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D400_MM/PSRT depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0b00,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D430_MM/AWGCT depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0b01,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D460/DS5U depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0b03,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D435/AWGC depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0b07,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel SR300 depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0aa5,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D405 S depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0b0c,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel L500 depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0b0d,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D435i depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0b3a,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	  /* Intel D430i depth camera */
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0b4b,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
+	{ .match_flags          = USB_DEVICE_ID_MATCH_DEVICE
+	                        | USB_DEVICE_ID_MATCH_INT_INFO,
+	  .idVendor                     = 0x8086,
+	  .idProduct            = 0x0b3d,
+	  .bInterfaceClass      = USB_CLASS_VIDEO,
+	  .bInterfaceSubClass   = 1,
+	  .bInterfaceProtocol   = 0,
+	  .driver_info          = UVC_QUIRK_APPEND_UVC_HEADER },
 	/* Generic USB Video Class */
 	{ USB_INTERFACE_INFO(USB_CLASS_VIDEO, 1, 0) },
 	{}
diff -Naur kernel/drivers/media/usb/uvc/uvc_video.c kernel.patch/drivers/media/usb/uvc/uvc_video.c
--- kernel/drivers/media/usb/uvc/uvc_video.c	2016-06-08 03:58:37.000000000 +0000
+++ kernel.patch/drivers/media/usb/uvc/uvc_video.c	2019-05-04 10:04:30.375464348 +0000
@@ -1070,6 +1070,7 @@
 	/* Complete the current frame if the buffer size was exceeded. */
 	if (len > maxlen) {
 		uvc_trace(UVC_TRACE_FRAME, "Frame complete (overflow).\n");
+		buf->error = 1;
 		buf->state = UVC_BUF_STATE_READY;
 	}
 }
@@ -1206,8 +1207,13 @@
 		do {
 			ret = uvc_video_decode_start(stream, buf, mem, len);
 			if (ret == -EAGAIN)
-				buf = uvc_queue_next_buffer(&stream->queue,
-							    buf);
+                        {
+                                if (stream->dev->quirks & UVC_QUIRK_APPEND_UVC_HEADER)
+                                {
+                                        uvc_video_decode_data(stream, buf, stream->bulk.header,256);
+                                }
+                                buf = uvc_queue_next_buffer(&stream->queue,buf);
+                        }
 		} while (ret == -EAGAIN);
 
 		/* If an error occurred skip the rest of the payload. */
@@ -1239,9 +1245,14 @@
 		if (!stream->bulk.skip_payload && buf != NULL) {
 			uvc_video_decode_end(stream, buf, stream->bulk.header,
 				stream->bulk.payload_size);
-			if (buf->state == UVC_BUF_STATE_READY)
-				buf = uvc_queue_next_buffer(&stream->queue,
-							    buf);
+                        if (buf->state == UVC_BUF_STATE_READY) {
+                                if (stream->dev->quirks & UVC_QUIRK_APPEND_UVC_HEADER) {
+                                        uvc_video_decode_data(stream, buf, stream->bulk.header,
+                                                                                        stream->bulk.header_size);
+                                }
+                                buf = uvc_queue_next_buffer(&stream->queue, buf);
+                        }
+
 		}
 
 		stream->bulk.header_size = 0;
diff -Naur kernel/drivers/media/usb/uvc/uvcvideo.h kernel.patch/drivers/media/usb/uvc/uvcvideo.h
--- kernel/drivers/media/usb/uvc/uvcvideo.h	2016-06-08 03:58:37.000000000 +0000
+++ kernel.patch/drivers/media/usb/uvc/uvcvideo.h	2019-05-04 10:04:30.377464330 +0000
@@ -105,6 +105,58 @@
 	{ 'H',  '2',  '6',  '4', 0x00, 0x00, 0x10, 0x00, \
 	 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}
 
+#define UVC_GUID_FORMAT_RAW8 \
+    { 'R',  'A',  'W',  '8', 0x66, 0x1a, 0x42, 0xa2, \
+     0x90, 0x65, 0xd0, 0x18, 0x14, 0xa8, 0xef, 0x8a}
+#define UVC_GUID_FORMAT_RW16 \
+    { 'R',  'W',  '1',  '6', 0x00, 0x00, 0x10, 0x00, \
+     0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}
+#define UVC_GUID_FORMAT_INVZ \
+       { 'I',  'N',  'V',  'Z', 0x90, 0x2d, 0x58, 0x4a, \
+        0x92, 0x0b, 0x77, 0x3f, 0x1f, 0x2c, 0x55, 0x6b}
+#define UVC_GUID_FORMAT_INZI \
+       { 'I',  'N',  'Z',  'I', 0x66, 0x1a, 0x42, 0xa2, \
+        0x90, 0x65, 0xd0, 0x18, 0x14, 0xa8, 0xef, 0x8a}
+#define UVC_GUID_FORMAT_INVR \
+       { 'I',  'N',  'V',  'R', 0x90, 0x2d, 0x58, 0x4a, \
+        0x92, 0x0b, 0x77, 0x3f, 0x1f, 0x2c, 0x55, 0x6b}
+#define UVC_GUID_FORMAT_INRI \
+       { 'I',  'N',  'R',  'I', 0x90, 0x2d, 0x58, 0x4a, \
+        0x92, 0x0b, 0x77, 0x3f, 0x1f, 0x2c, 0x55, 0x6b}
+#define UVC_GUID_FORMAT_INVI \
+       { 'I',  'N',  'V',  'I', 0xdb, 0x57, 0x49, 0x5e, \
+        0x8e, 0x3f, 0xf4, 0x79, 0x53, 0x2b, 0x94, 0x6f}
+#define UVC_GUID_FORMAT_RELI \
+       { 'R',  'E',  'L',  'I', 0x14, 0x13, 0x43, 0xf9, \
+        0xa7, 0x5a, 0xee, 0x6b, 0xbf, 0x01, 0x2e, 0x23}
+#define UVC_GUID_FORMAT_L8 \
+       { '2', 0x00,  0x00,  0x00, 0x00, 0x00, 0x10, 0x00, \
+        0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}
+#define UVC_GUID_FORMAT_L16 \
+       { 'Q', 0x00,  0x00,  0x00, 0x00, 0x00, 0x10, 0x00, \
+        0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}
+#define UVC_GUID_FORMAT_D16 \
+       { 'P', 0x00,  0x00,  0x00, 0x00, 0x00, 0x10, 0x00, \
+        0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}
+#define UVC_GUID_FORMAT_BAYER16 \
+    { 'R',  'W',  '1',  '6', 0x66, 0x1a, 0x42, 0xa2, \
+     0x90, 0x65, 0xd0, 0x18, 0x14, 0xa8, 0xef, 0x8a}
+#define UVC_GUID_FORMAT_W10 \
+    { 'W',  '1',  '0',  ' ', 0x00, 0x00, 0x10, 0x00, \
+        0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}
+#define UVC_GUID_FORMAT_CONFIDENCE_MAP \
+       { 'C',  ' ',  ' ',  ' ', 0x00, 0x00, 0x10, 0x00, \
+       0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}
+#define UVC_GUID_FORMAT_FG \
+       { 'F',  'G',  ' ',  ' ', 0x00, 0x00, 0x10, 0x00, \
+       0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}
+#define UVC_GUID_FORMAT_INZC \
+       { 'I',  'N',  'Z',  'C', 0x02, 0xb6, 0x0f, 0x48, \
+       0x97, 0x8c, 0xe4, 0xe8, 0x8a, 0xe8, 0x9b, 0x89}
+#define UVC_GUID_FORMAT_PAIR \
+       { 'P',  'A',  'I',  'R', 0x36, 0x85, 0x41, 0x48, \
+       0xb6, 0xbf, 0x8f, 0xc6, 0xff, 0xb0, 0x83, 0xa8}
+
 /* ------------------------------------------------------------------------
  * Driver specific constants.
  */
@@ -118,7 +170,7 @@
 /* Maximum number of video buffers. */
 #define UVC_MAX_VIDEO_BUFFERS	32
 /* Maximum status buffer size in bytes of interrupt URB. */
-#define UVC_MAX_STATUS_SIZE	16
+#define UVC_MAX_STATUS_SIZE	32
 
 #define UVC_CTRL_CONTROL_TIMEOUT	300
 #define UVC_CTRL_STREAMING_TIMEOUT	5000
@@ -137,6 +189,7 @@
 #define UVC_QUIRK_FIX_BANDWIDTH		0x00000080
 #define UVC_QUIRK_PROBE_DEF		0x00000100
 #define UVC_QUIRK_RESTRICT_FRAME_RATE	0x00000200
+#define UVC_QUIRK_APPEND_UVC_HEADER     0x00001000
 
 /* Format flags */
 #define UVC_FMT_FLAG_COMPRESSED		0x00000001
diff -Naur kernel/include/linux/hid-sensor-ids.h kernel.patch/include/linux/hid-sensor-ids.h
--- kernel/include/linux/hid-sensor-ids.h	2016-06-08 03:58:39.000000000 +0000
+++ kernel.patch/include/linux/hid-sensor-ids.h	2019-05-04 10:04:30.378464321 +0000
@@ -74,6 +74,7 @@
 #define HID_USAGE_SENSOR_TIME_HOUR				0x200525
 #define HID_USAGE_SENSOR_TIME_MINUTE				0x200526
 #define HID_USAGE_SENSOR_TIME_SECOND				0x200527
+#define HID_USAGE_SENSOR_TIME_TIMESTAMP				0x200529
 
 /* Units */
 #define HID_USAGE_SENSOR_UNITS_NOT_SPECIFIED			0x00
diff -Naur kernel/include/linux/iio/buffer.h kernel.patch/include/linux/iio/buffer.h
--- kernel/include/linux/iio/buffer.h	2016-06-08 03:58:39.000000000 +0000
+++ kernel.patch/include/linux/iio/buffer.h	2019-05-04 10:51:14.900303750 +0000
@@ -122,6 +122,31 @@
  */
 int iio_push_to_buffers(struct iio_dev *indio_dev, unsigned char *data);
 
+/*
+ * iio_push_to_buffers_with_timestamp() - push data and timestamp to buffers
+ * @indio_dev:		iio_dev structure for device.
+ * @data:		sample data
+ * @timestamp:		timestamp for the sample data
+ *
+ * Pushes data to the IIO device's buffers. If timestamps are enabled for the
+ * device the function will store the supplied timestamp as the last element in
+ * the sample data buffer before pushing it to the device buffers. The sample
+ * data buffer needs to be large enough to hold the additional timestamp
+ * (usually the buffer should be indio->scan_bytes bytes large).
+ *
+ * Returns 0 on success, a negative error code otherwise.
+ */
+static inline int iio_push_to_buffers_with_timestamp(struct iio_dev *indio_dev,
+	void *data, int64_t timestamp)
+{
+	if (indio_dev->scan_timestamp) {
+		size_t ts_offset = indio_dev->scan_bytes / sizeof(int64_t) - 1;
+		((int64_t *)data)[ts_offset] = timestamp;
+	}
+
+	return iio_push_to_buffers(indio_dev, data);
+}
+
 int iio_update_demux(struct iio_dev *indio_dev);
 
 /**
diff -Naur kernel/include/uapi/linux/videodev2.h kernel.patch/include/uapi/linux/videodev2.h
--- kernel/include/uapi/linux/videodev2.h	2016-06-08 03:58:39.000000000 +0000
+++ kernel.patch/include/uapi/linux/videodev2.h	2019-05-04 15:25:04.524922698 +0000
@@ -428,6 +428,19 @@
 #define V4L2_PIX_FMT_JPGL	v4l2_fourcc('J', 'P', 'G', 'L') /* JPEG-Lite */
 #define V4L2_PIX_FMT_SE401      v4l2_fourcc('S', '4', '0', '1') /* se401 janggu compressed rgb */
 #define V4L2_PIX_FMT_S5C_UYVY_JPG v4l2_fourcc('S', '5', 'C', 'I') /* S5C73M3 interleaved UYVY/JPEG */
+#define V4L2_PIX_FMT_Z16      v4l2_fourcc('Z', '1', '6', ' ') /* Depth data 16-bit */
+#define V4L2_PIX_FMT_RW16     v4l2_fourcc('R', 'W', '1', '6') /* Raw data 16-bit */
+#define V4L2_PIX_FMT_INZI     v4l2_fourcc('I', 'N', 'Z', 'I') /* 24 Depth/IR 16:8 */
+#define V4L2_PIX_FMT_INVR     v4l2_fourcc('I', 'N', 'V', 'R') /* 16 Depth */
+#define V4L2_PIX_FMT_INRI     v4l2_fourcc('I', 'N', 'R', 'I') /* 24 Depth/IR 16:8 */
+#define V4L2_PIX_FMT_RELI     v4l2_fourcc('R', 'E', 'L', 'I') /* 8 IR alternating on off illumination */
+#define V4L2_PIX_FMT_W10      v4l2_fourcc('W', '1', '0', ' ') /* Packed raw data 10-bit */
+#define V4L2_PIX_FMT_CONFIDENCE_MAP  v4l2_fourcc('C', ' ', ' ', ' ') /* Two pixels in one byte */
+/*  Librealsense development*/
+#define V4L2_PIX_FMT_FG                v4l2_fourcc('F', 'G', ' ', ' ') /* Frame Grabber */
+#define V4L2_PIX_FMT_INZC              v4l2_fourcc('I', 'N', 'Z', 'C') /* Planar Depth/Confidence */
+#define V4L2_PIX_FMT_PAIR              v4l2_fourcc('P', 'A', 'I', 'R') /* Relative IR */
+
 
 /*
  *	F O R M A T   E N U M E R A T I O N
